Only in fbterm-1.6-wide: Makefile
Only in fbterm-1.6-wide: config.h
Only in fbterm-1.6-wide: config.log
Only in fbterm-1.6-wide: config.status
Only in fbterm-1.6-wide/doc: Makefile
Only in fbterm-1.6-wide/doc: fbterm.1
Only in fbterm-1.6-wide/im: .deps
Only in fbterm-1.6-wide/im: Makefile
Only in fbterm-1.6-wide/im: immessage.h
Only in fbterm-1.6-wide/im: input_key.h
Only in fbterm-1.6-wide/src: .deps
Only in fbterm-1.6-wide/src: Makefile
diff -cr fbterm-1.6/src/fbconfig.cpp fbterm-1.6-wide/src/fbconfig.cpp
*** fbterm-1.6/src/fbconfig.cpp	2009-11-14 10:00:00.000000000 +0900
--- fbterm-1.6-wide/src/fbconfig.cpp	2010-07-05 01:14:20.624959474 +0900
***************
*** 203,208 ****
--- 203,211 ----
  		"\n"
  		"# specify the favorite input method program to run\n"
  		"input-method=\n"
+ 	        "\n"
+ 	        "# treat ambiguous width characters as wide\n"
+ 	        "#ambiguous-wide=yes\n"
  		;
  
  	struct stat cstat;
***************
*** 231,236 ****
--- 234,240 ----
  		{ "cursor-shape", required_argument, 0, 0 },
  		{ "cursor-interval", required_argument, 0, 1 },
  		{ "font-width", required_argument, 0, 2 },
+ 		{ "ambiguous-wide", no_argument, 0, 'a' },
  #ifdef ENABLE_VESA
  		{ "vesa-mode", required_argument, 0, 3 },
  #endif
***************
*** 238,244 ****
  	};
  
  	s32 index;
! 	while ((index = getopt_long(argc, argv, "Vvhn:s:f:b:e:r:i:", options, 0)) != -1) {
  		switch (index) {
  		case 'V':
  			printf("FbTerm version " VERSION "\n");
--- 242,248 ----
  	};
  
  	s32 index;
! 	while ((index = getopt_long(argc, argv, "Vvhn:s:f:b:e:r:i:a", options, 0)) != -1) {
  		switch (index) {
  		case 'V':
  			printf("FbTerm version " VERSION "\n");
***************
*** 260,265 ****
--- 264,270 ----
  				"  -b, --color-background=NUM      specify background color\n"
  				"  -e, --text-encodings=TEXT       specify additional text encodings\n"
  				"  -r, --screen-rotate=NUM         specify orientation of screen display\n"
+ 				"  -a, --ambiguous-wide            treat ambiguous width characters as wide\n"
  				"  -i, --input-method=TEXT         specify input method program\n"
  				"      --cursor-shape=NUM          specify default cursor shape\n"
  				"      --cursor-interval=NUM       specify cursor flash interval\n"
Only in fbterm-1.6-wide/src: fbconfig.cpp~
diff -cr fbterm-1.6/src/fbshell.cpp fbterm-1.6-wide/src/fbshell.cpp
*** fbterm-1.6/src/fbshell.cpp	2009-11-14 10:00:00.000000000 +0900
--- fbterm-1.6-wide/src/fbshell.cpp	2010-07-05 00:35:37.848973983 +0900
***************
*** 334,339 ****
--- 334,346 ----
  	Config::instance()->getOption("word-chars", buf, len);
  }
  
+ bool VTerm::init_ambiguous_wide()
+ {
+ 	bool val;
+ 	Config::instance()->getOption("ambiguous-wide", val);
+ 	return val;
+ }
+ 
  FbShell::FbShell()
  {
  	mImStarted = false;
Only in fbterm-1.6-wide/src: fbshell.cpp~
Only in fbterm-1.6-wide/src: fbterm
Only in fbterm-1.6-wide/src: fbterm-fbconfig.o
Only in fbterm-1.6-wide/src: fbterm-fbdev.o
Only in fbterm-1.6-wide/src: fbterm-fbio.o
Only in fbterm-1.6-wide/src: fbterm-fbshell.o
Only in fbterm-1.6-wide/src: fbterm-fbshellman.o
Only in fbterm-1.6-wide/src: fbterm-fbterm.o
Only in fbterm-1.6-wide/src: fbterm-font.o
Only in fbterm-1.6-wide/src: fbterm-improxy.o
Only in fbterm-1.6-wide/src: fbterm-input.o
Only in fbterm-1.6-wide/src: fbterm-mouse.o
Only in fbterm-1.6-wide/src: fbterm-screen.o
Only in fbterm-1.6-wide/src: fbterm-screen_render.o
Only in fbterm-1.6-wide/src: fbterm-vesadev.o
Only in fbterm-1.6-wide/src/lib: .deps
Only in fbterm-1.6-wide/src/lib: Makefile
Only in fbterm-1.6-wide/src/lib: libshell.a
Only in fbterm-1.6-wide/src/lib: libshell_a-io.o
Only in fbterm-1.6-wide/src/lib: libshell_a-shell.o
Only in fbterm-1.6-wide/src/lib: libshell_a-vterm.o
Only in fbterm-1.6-wide/src/lib: libshell_a-vterm_action.o
Only in fbterm-1.6-wide/src/lib: libshell_a-vterm_states.o
diff -cr fbterm-1.6/src/lib/vterm.cpp fbterm-1.6-wide/src/lib/vterm.cpp
*** fbterm-1.6/src/lib/vterm.cpp	2009-11-14 10:00:00.000000000 +0900
--- fbterm-1.6-wide/src/lib/vterm.cpp	2010-07-05 01:08:16.343959171 +0900
***************
*** 95,100 ****
--- 95,101 ----
  		history_lines = init_history_lines();
  		default_char_attr.fcolor = init_default_color(true);
  		default_char_attr.bcolor = init_default_color(false);
+ 		ambiguous_wide = init_ambiguous_wide();
  	}
  
  	text = 0;
***************
*** 452,460 ****
  	return bisearch(ucs, double_width, sizeof(double_width) / sizeof(struct interval) - 1);
  }
  
  void VTerm::do_normal_char()
  {
! 	bool dw = is_double_width(cur_char);
  	if (cur_char > 0xffff) cur_char = 0xfffd;
  
  	u32 yp = linenumbers[cursor_y] * max_width;
--- 453,524 ----
  	return bisearch(ucs, double_width, sizeof(double_width) / sizeof(struct interval) - 1);
  }
  
+ bool is_double_width_amb_wide(u32 ucs)
+ {
+ 	static const struct interval double_or_amb_width[] = {
+ 		{ 0x00a1, 0x00a4}, { 0x00a7, 0x00a8}, { 0x00aa, 0x00aa},
+ 		{ 0x00ad, 0x00ae}, { 0x00b0, 0x00b4}, { 0x00b6, 0x00ba},
+ 		{ 0x00bc, 0x00bf}, { 0x00c6, 0x00c6}, { 0x00d0, 0x00d0},
+ 		{ 0x00d7, 0x00d8}, { 0x00de, 0x00e1}, { 0x00e6, 0x00e6},
+ 		{ 0x00e8, 0x00ea}, { 0x00ec, 0x00ed}, { 0x00f0, 0x00f0},
+ 		{ 0x00f2, 0x00f3}, { 0x00f7, 0x00fa}, { 0x00fc, 0x00fc},
+ 		{ 0x00fe, 0x00fe}, { 0x0101, 0x0101}, { 0x0111, 0x0111},
+ 		{ 0x0113, 0x0113}, { 0x011b, 0x011b}, { 0x0126, 0x0127},
+ 		{ 0x012b, 0x012b}, { 0x0131, 0x0133}, { 0x0138, 0x0138},
+ 		{ 0x013f, 0x0142}, { 0x0144, 0x0144}, { 0x0148, 0x014b},
+ 		{ 0x014d, 0x014d}, { 0x0152, 0x0153}, { 0x0166, 0x0167},
+ 		{ 0x016b, 0x016b}, { 0x01ce, 0x01ce}, { 0x01d0, 0x01d0},
+ 		{ 0x01d2, 0x01d2}, { 0x01d4, 0x01d4}, { 0x01d6, 0x01d8},
+ 		{ 0x01da, 0x01da}, { 0x01dc, 0x01dc}, { 0x0251, 0x0251},
+ 		{ 0x0261, 0x0261}, { 0x02c4, 0x02c4}, { 0x02c7, 0x02c7},
+ 		{ 0x02c9, 0x02cb}, { 0x02cd, 0x02cd}, { 0x02d0, 0x02d0},
+ 		{ 0x02d8, 0x02db}, { 0x02dd, 0x02df}, { 0x0300, 0x034f},
+ 		{ 0x0360, 0x036f}, { 0x0391, 0x03a1}, { 0x03a3, 0x03a9}, 
+ 		{ 0x03b1, 0x03c1}, { 0x03c3, 0x03c9}, { 0x0401, 0x0401},
+ 		{ 0x0410, 0x044f}, { 0x0451, 0x0451}, { 0x1100, 0x115F},
+ 		{ 0x2010, 0x2010}, { 0x2013, 0x2016}, { 0x2018, 0x2019},
+ 		{ 0x201c, 0x201d}, { 0x2020, 0x2022}, { 0x2024, 0x2027},
+ 		{ 0x2030, 0x2030}, { 0x2032, 0x2033}, { 0x2035, 0x2035},
+ 		{ 0x203b, 0x203b}, { 0x203e, 0x203e}, { 0x2074, 0x2074},
+ 		{ 0x2081, 0x2084}, { 0x20ac, 0x20ac}, { 0x2103, 0x2103},
+ 		{ 0x2105, 0x2105}, { 0x2109, 0x2113}, { 0x2116, 0x2116},
+ 		{ 0x2121, 0x2122}, { 0x2126, 0x212b}, { 0x2153, 0x2154},
+ 		{ 0x215b, 0x215e}, { 0x2160, 0x216b}, { 0x2170, 0x2179},
+ 		{ 0x2190, 0x2199}, { 0x21b8, 0x21b9}, { 0x21d2, 0x21d2},
+ 		{ 0x21d4, 0x21d4}, { 0x21e7, 0x21e7}, { 0x2200, 0x2200},
+ 		{ 0x2202, 0x2203}, { 0x2207, 0x2208}, { 0x220b, 0x220b},
+ 		{ 0x220f, 0x220f}, { 0x2211, 0x2211}, { 0x2215, 0x2215},
+ 		{ 0x221a, 0x221a}, { 0x221d, 0x2220}, { 0x2223, 0x2223},
+ 		{ 0x2225, 0x2225}, { 0x2227, 0x222c}, { 0x222e, 0x222e},
+ 		{ 0x2234, 0x2237}, { 0x223c, 0x223d}, { 0x2248, 0x2248},
+ 		{ 0x224c, 0x224c}, { 0x2252, 0x2252}, { 0x2260, 0x2261},
+ 		{ 0x2264, 0x2267}, { 0x226a, 0x226b}, { 0x226e, 0x226f},
+ 		{ 0x2282, 0x2283}, { 0x2286, 0x2287}, { 0x2295, 0x2295},
+ 		{ 0x22a5, 0x22a5}, { 0x22bf, 0x22bf}, { 0x2312, 0x2312},
+ 		{ 0x2329, 0x232A}, { 0x2460, 0x24fe}, { 0x2500, 0x254b},
+ 		{ 0x2550, 0x2573}, { 0x2580, 0x258f}, { 0x2592, 0x2595},
+ 		{ 0x25a0, 0x25a1}, { 0x25a3, 0x25a9}, { 0x25b2, 0x25b3},
+ 		{ 0x25b6, 0x25b7}, { 0x25bc, 0x25bd}, { 0x25c0, 0x26c1},
+ 		{ 0x25c6, 0x25c8}, { 0x25cb, 0x25cb}, { 0x25ce, 0x25d1},
+ 		{ 0x25e2, 0x25e5}, { 0x25ef, 0x25ef}, { 0x2605, 0x2606},
+ 		{ 0x2609, 0x2609}, { 0x260e, 0x260f}, { 0x261c, 0x261c},
+ 		{ 0x261e, 0x261e}, { 0x2640, 0x2640}, { 0x2642, 0x2642},
+ 		{ 0x2660, 0x2661}, { 0x2663, 0x2665}, { 0x2667, 0x266a},
+ 		{ 0x266c, 0x266d}, { 0x266f, 0x266f}, { 0x273d, 0x273d},
+ 		{ 0x2776, 0x277f}, { 0x1100, 0x115F}, { 0x2329, 0x232A},
+ 		{ 0x2E80, 0x303E}, { 0x3040, 0xA4CF}, { 0xAC00, 0xD7A3},
+ 		{ 0xF900, 0xFAFF}, { 0xfe00, 0xfe0f}, { 0xFE10, 0xFE19},
+ 		{ 0xFE30, 0xFE6F}, { 0xFF00, 0xFF60}, { 0xFFE0, 0xFFE6},
+ 		{ 0xfffd, 0xfffd}, { 0x20000, 0x2FFFD}, { 0x30000, 0x3FFFD}
+ 	};
+ 	return bisearch(ucs, double_or_amb_width,
+ 		sizeof(double_or_amb_width) / sizeof(struct interval) - 1);
+ }
+ 
  void VTerm::do_normal_char()
  {
! 	bool dw = ambiguous_wide ? is_double_width_amb_wide(cur_char) :
! 	 			   is_double_width(cur_char);
  	if (cur_char > 0xffff) cur_char = 0xfffd;
  
  	u32 yp = linenumbers[cursor_y] * max_width;
Only in fbterm-1.6-wide/src/lib: vterm.cpp.orig
Only in fbterm-1.6-wide/src/lib: vterm.cpp~
diff -cr fbterm-1.6/src/lib/vterm.h fbterm-1.6-wide/src/lib/vterm.h
*** fbterm-1.6/src/lib/vterm.h	2009-11-14 10:00:00.000000000 +0900
--- fbterm-1.6-wide/src/lib/vterm.h	2010-07-05 00:35:37.848973983 +0900
***************
*** 179,184 ****
--- 179,185 ----
  	static void init_state();
  	static u16 init_history_lines();
  	static u8 init_default_color(bool foreground);
+ 	static bool init_ambiguous_wide();
  
  	typedef enum {
  		ESnormal = 0, ESesc, ESsquare, ESnonstd, ESpercent, EScharset, EShash, ESfunckey, ESkeep
***************
*** 205,210 ****
--- 206,214 ----
  	u16 utf8_count;
  	u32 cur_char;
  
+ 	//treat cjk ambiguous width characters as wide
+ 	bool ambiguous_wide;
+ 
  	//charset
  	bool utf8;
  	bool g0_is_current;
Only in fbterm-1.6-wide/src/lib: vterm.h.orig
Only in fbterm-1.6-wide/src/lib: vterm.h~
Only in fbterm-1.6-wide/src: log
Only in fbterm-1.6-wide/src: wide
Only in fbterm-1.6-wide: stamp-h1
Only in fbterm-1.6-wide/terminfo: Makefile
