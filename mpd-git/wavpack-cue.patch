24a25
> #include "cue/cue_tag.h"
26a28
> #include <libcue/libcue.h>
64a67,181
> 
> /** -- original function begin --*/
> 
> #define CUESHEET_SIZE 10240
> #define VTRACK_FORMAT_NAME "vtrack %02d.wv"
> #define VTRACK_SAMPLE_NAME "vtrack 00.wv"
> 
> static int 
> wavpack_get_internal_cue(const char *fname, char *cue_data, int cue_size) {
>     WavpackContext *wpc;
>     char error[ERRORLEN];
>     int ret;
> 
>     wpc = WavpackOpenFileInput(fname, error, OPEN_TAGS, 0);
>     if (wpc == NULL) {
>         g_warning("failed to open WavPack file \"%s\": %s\n", fname, error);
>         return 0;
>     }
> 
>     ret = WavpackGetTagItem(wpc, "Cuesheet", cue_data, cue_size);
>     WavpackCloseFile(wpc);
> 
>     if (cue_data == NULL) {
>         return 0;
>     }
> 
>     return ret;
> }
> 
> 
> static int
> wavpack_get_internal_cue_tnum(const char *fname) {   
>     int tnum = 0;
>     char *ptr = rindex(fname, '/') + 1;
>     sscanf(ptr, VTRACK_FORMAT_NAME, &tnum);
>     return tnum;
> }
> 
> 
> static WavpackContext *
> wavpack_get_wavpack_context(const char *fname, uint32_t *offset_sample, uint32_t *samples) {
>     WavpackContext *wpc;
>     char *ptr, error[ERRORLEN], cue_data[CUESHEET_SIZE];
>     int tnum, cue_size;
>     Cd *cd;
>     Track *track;
>     long start, length;
> 
>     if ((tnum = wavpack_get_internal_cue_tnum(fname)) > 0) {
>         ptr = rindex(fname, '/');
>         *ptr = '\0';
>         wpc = WavpackOpenFileInput(fname, error, OPEN_TAGS | OPEN_WVC | OPEN_NORMALIZE, 23);
>         
>         if (wpc == NULL) {
>             *ptr = '/';
>             return NULL;
>         }
> 
>         cue_size = wavpack_get_internal_cue(fname, cue_data, CUESHEET_SIZE);
>         *ptr = '/';
> 
>         if (cue_size > 0) {
>             cd = cue_parse_string(cue_data);
>             track = cd_get_track(cd, tnum);
>             start = track_get_start(track) * (WavpackGetSampleRate(wpc)/75);
>             length = track_get_length(track) * (WavpackGetSampleRate(wpc)/75);
>             
>             if (length == 0) {
>                 length = WavpackGetNumSamples(wpc) - start;
>             }
>             
>             *offset_sample = (uint32_t)start;
>             *samples = (uint32_t)length;
>         }
>         
>     } else {
>         wpc = WavpackOpenFileInput(fname, error, OPEN_TAGS | OPEN_WVC | OPEN_NORMALIZE, 23);
> 
>         if (wpc == NULL) {
>             return NULL;
>         }
> 
>         *offset_sample = 0;
>         *samples = WavpackGetNumSamples(wpc);
>     }
> 
>     return wpc;
> }
> 
> 
> static char *
> wavpack_container_scan(const char *fname, const unsigned int tnum)
> {
>     int cue_size;
>     char cue_data[CUESHEET_SIZE];
>     struct tag *tag;
>     char *vtrack;
> 
>     cue_size = wavpack_get_internal_cue(fname, cue_data, CUESHEET_SIZE);
> 
>     if (cue_size > 0) {
>         if ((tag = cue_tag_string(cue_data, tnum)) != NULL) {
>             vtrack = g_malloc(sizeof(VTRACK_SAMPLE_NAME));
>             sprintf(vtrack, VTRACK_FORMAT_NAME, tnum);
>             tag_free(tag);
>             return vtrack;
>         }
>     }
> 
>     return NULL;
> }
> 
> /** -- end -- */
> 
> 
158c275
< wavpack_decode(struct decoder *decoder, WavpackContext *wpc, bool can_seek)
---
> wavpack_decode(struct decoder *decoder, WavpackContext *wpc, bool can_seek, uint32_t offset_sample, uint32_t samples)
190,191c307,309
< 	total_time = WavpackGetNumSamples(wpc);
< 	total_time /= audio_format.sample_rate;
---
> 	//total_time = WavpackGetNumSamples(wpc);
> 	//total_time /= audio_format.sample_rate;
>     total_time = (float)samples / audio_format.sample_rate;
199c317
< 
---
>     if (can_seek) WavpackSeekSample(wpc, offset_sample);
206c324
< 				if (WavpackSeekSample(wpc, where)) {
---
> 				if (WavpackSeekSample(wpc, where + offset_sample)) {
299c417,441
< 	wpc = WavpackOpenFileInput(fname, error, OPEN_TAGS, 0);
---
>     char cue_data[CUESHEET_SIZE], *ptr;
>     int cue_size, tnum;
>     uint32_t offset_sample, samples;
> 
>     if ((tnum = wavpack_get_internal_cue_tnum(fname)) > 0) {
>         wpc = wavpack_get_wavpack_context(fname, &offset_sample, &samples);
>         if (wpc == NULL) {
>             return NULL;
>         }
> 
>         cue_size = WavpackGetTagItem(wpc, "Cuesheet", cue_data, CUESHEET_SIZE);
>         tag = NULL;
>         if (cue_size > 0) {
>             tag = cue_tag_string(cue_data, tnum);
>             tag->time = samples / WavpackGetSampleRate(wpc);
>         }
>         WavpackCloseFile(wpc);
>         return tag;
>     }
>     else
>     {
>     
>     wpc = WavpackOpenFileInput(fname, error, OPEN_TAGS, 0);
>         
> 
337d478
< 
338a480
>     }
511a654
>     uint32_t samples;
535c678,679
< 	wavpack_decode(decoder, wpc, can_seek);
---
>     samples = WavpackGetNumSamples(wpc);
> 	wavpack_decode(decoder, wpc, can_seek, 0, samples);
550a695
>     uint32_t offset_sample, samples;
551a697,698
>     wpc = wavpack_get_wavpack_context(fname, &offset_sample, &samples);
>     /*
555a703
>     */
568c716
< 	wavpack_decode(decoder, wpc, true);
---
> 	wavpack_decode(decoder, wpc, true, offset_sample, samples);
582a731,732
> 
> 
589c739,740
< 	.mime_types = wavpack_mime_types
---
> 	.mime_types = wavpack_mime_types,
>     .container_scan = wavpack_container_scan
